import telebot
import json
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import config
from typing import Dict, Any

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = config.TOKEN
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
CALLBACK_MAIN_MENU = "menu"
CALLBACK_MATERIALS = "materials"
CALLBACK_TRAINING = "training"
CALLBACK_FEEDBACK = "feedback"
CALLBACK_ABOUT = "about"
CALLBACK_REFERRAL = "referral"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data(filename: str, default: Dict = {}) -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as file:
            return json.load(file)
    return default

def save_data(filename: str, data: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª"""
    with open(filename, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_data = load_data("users.json")
app_data = load_data("data.json")
FEEDBACK_FILE = "feedback.txt"

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = InlineKeyboardMarkup(row_width=1)
    buttons = [
        ("üìö –û–±—É—á–µ–Ω–∏–µ", CALLBACK_TRAINING),
        ("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", CALLBACK_MATERIALS),
        ("üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", CALLBACK_FEEDBACK),
        ("‚ÑπÔ∏è –û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö", CALLBACK_ABOUT),
        ("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", CALLBACK_REFERRAL)
    ]
    markup.add(*[InlineKeyboardButton(text, callback_data=data) for text, data in buttons])
    return markup

def create_materials_menu(user_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    user_level = user_data.get(user_id, {}).get('level', 1)
    markup = InlineKeyboardMarkup(row_width=1)
    
    for topic, details in app_data.get("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", {}).items():
        if user_level >= details.get("–£—Ä–æ–≤–µ–Ω—å", 1):
            markup.add(InlineKeyboardButton(topic[:20], callback_data=f"mat_{topic[:20]}"))
    
    markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=CALLBACK_MAIN_MENU))
    return markup

def create_subtopics_menu(topic: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    markup = InlineKeyboardMarkup(row_width=1)
    for subtopic in app_data["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"].get(topic, {}):
        markup.add(InlineKeyboardButton(subtopic[:20], callback_data=f"sub_{topic[:15]}_{subtopic[:15]}"))
    markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=CALLBACK_MATERIALS))
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def handle_start(message: telebot.types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.chat.id)
    args = message.text.split()
    referral = args[1] if len(args) > 1 else None

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            "level": 1,
            "invited": [],
            "completed_lessons": [],
            "referral_name": message.chat.username or f"User_{user_id}"
        }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if referral:
            for uid, uinfo in user_data.items():
                if (uinfo.get('referral_name') == referral 
                        and uinfo['level'] < 3 
                        and user_id not in uinfo['invited']):
                    uinfo['level'] += 1
                    uinfo['invited'].append(user_id)
                    break
    
    save_data("users.json", user_data)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    with open("welcome.jpg", "rb") as photo:
        bot.send_photo(user_id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = str(call.message.chat.id)
    action = call.data.split('_')[0] if '_' in call.data else call.data

    try:
        handlers = {
            CALLBACK_MAIN_MENU: lambda: bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                chat_id=user_id, 
                message_id=call.message.message_id, 
                reply_markup=create_main_menu()
            ),
            CALLBACK_MATERIALS: lambda: bot.edit_message_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", 
                chat_id=user_id, 
                message_id=call.message.message_id, 
                reply_markup=create_materials_menu(user_id)
            ),
            'mat': lambda: handle_material_selection(call),
            'sub': lambda: handle_subtopic_selection(call),
            CALLBACK_TRAINING: lambda: bot.send_message(
                user_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", 
                reply_markup=create_training_menu(user_id)
            ),
            'lesson': lambda: handle_lesson_selection(call),
            'answer': lambda: handle_quiz_answer(call),
            CALLBACK_FEEDBACK: lambda: request_feedback(call),
            CALLBACK_ABOUT: lambda: bot.send_message(
                user_id, 
                app_data.get("About", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            ),
            CALLBACK_REFERRAL: lambda: send_referral_link(user_id)
        }
        
        handler = handlers.get(action)
        if handler:
            handler()
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.answer_callback_query(call.id)
        print(f"–û—à–∏–±–∫–∞: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def create_training_menu(user_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_level = user_data.get(user_id, {}).get('level', 1)
    markup = InlineKeyboardMarkup(row_width=1)
    
    for lesson, details in app_data.get("–û–±—É—á–µ–Ω–∏–µ", {}).items():
        if user_level >= details.get("–£—Ä–æ–≤–µ–Ω—å", 1):
            status = "‚úÖ" if lesson in user_data[user_id].get("completed_lessons", []) else "‚ùå"
            markup.add(InlineKeyboardButton(f"{status} {lesson}", callback_data=f"lesson_{lesson}"))
    
    markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=CALLBACK_MAIN_MENU))
    return markup

def send_referral_link(user_id: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    link = f"https://t.me/product_analitics312_bot?start={user_data[user_id]['referral_name']}"
    bot.send_message(user_id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")

def handle_material_selection(call: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    topic = call.data.split('_', 1)[1]
    real_topic = next((t for t in app_data["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"] if t.startswith(topic)), topic)
    bot.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É –≤: {real_topic}", 
        chat_id=call.message.chat.id, 
        message_id=call.message.message_id, 
        reply_markup=create_subtopics_menu(real_topic)
    )

def handle_subtopic_selection(call: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–µ–º—ã"""
    parts = call.data.split('_', 2)
    topic_part = parts[1]
    subtopic_part = parts[2]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã –∏ –ø–æ–¥—Ç–µ–º—ã
    real_topic = next((t for t in app_data["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"] if t.startswith(topic_part)), topic_part)
    real_subtopic = next(
        (s for s in app_data["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"][real_topic] if s.startswith(subtopic_part)),
        subtopic_part
    )
    
    if real_subtopic in app_data["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"][real_topic]:
        content = app_data["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"][real_topic][real_subtopic]
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"mat_{real_topic[:20]}")
        )
        bot.send_message(call.message.chat.id, content, reply_markup=markup)

def handle_lesson_selection(call: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞"""
    lesson = call.data.split('_', 1)[1]
    lesson_data = app_data["–û–±—É—á–µ–Ω–∏–µ"].get(lesson)
    
    if lesson_data:
        markup = InlineKeyboardMarkup(row_width=1)
        for answer in lesson_data.get("–û—Ç–≤–µ—Ç—ã", []):
            markup.add(InlineKeyboardButton(answer, callback_data=f"answer_{lesson}_{answer}"))
        bot.send_message(call.message.chat.id, lesson_data["–¢–µ–∫—Å—Ç"], reply_markup=markup)

def handle_quiz_answer(call: telebot.types.CallbackQuery) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ä–æ–∫"""
    _, lesson, answer = call.data.split('_', 2)
    correct_answer = app_data["–û–±—É—á–µ–Ω–∏–µ"][lesson]["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"]
    user_id = str(call.message.chat.id)
    
    if answer == correct_answer:
        if lesson not in user_data[user_id]["completed_lessons"]:
            user_data[user_id]["completed_lessons"].append(lesson)
            save_data("users.json", user_data)
        bot.send_message(user_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=create_retry_menu())
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=create_retry_menu())

def create_retry_menu() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ä–æ–∫"""
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=CALLBACK_TRAINING),
        InlineKeyboardButton("¬´ –ú–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)
    )

def request_feedback(call: telebot.types.CallbackQuery) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(call.message, process_feedback)

def process_feedback(message: telebot.types.Message) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    user_id = str(message.chat.id)
    user_link = f"@{message.chat.username}" if message.chat.username else f"tg://user?id={user_id}"
    
    with open(FEEDBACK_FILE, "a", encoding="utf-8") as file:
        file.write(f"{user_link}: {message.text}\n")
    
    bot.send_message(
        user_id, 
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", 
        reply_markup=create_feedback_thank_you_menu()
    )

def create_feedback_thank_you_menu() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞"""
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–∑—ã–≤", callback_data=CALLBACK_FEEDBACK),
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
if __name__ == "__main__":
    bot.polling(none_stop=True)